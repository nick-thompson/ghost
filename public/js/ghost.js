// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Track, TrackView, app, locate, number, rulerTemplate, spaceToggle, trackTemplate, _i;
    app = {
      context: new webkitAudioContext(),
      metronome: new Metronome(140, 4),
      buffers: []
    };
    trackTemplate = "<table class=\"track\">\n  <tr>\n    <td class=\"title-cell\" colspan=3>\n      <%= title %>\n    </td>\n  </tr>\n  <% for (var i = 0; i < 64; i++) { %>\n    <tr>\n      <td class=\"sc-note\">\n        <input type=\"text\" class=\"track-input mousetrap\" value=\"....\" placeholder=\"....\" readonly>\n      </td>\n      <td class=\"sc-gain\">\n        <input type=\"text\" class=\"track-input mousetrap\" value=\"..\" placeholder=\"..\" maxlength=\"2\">\n      </td>\n      <td class=\"sc-pan\">\n        <input type=\"text\" class=\"track-input mousetrap\" value=\"..\" placeholder=\"..\" maxlength=\"2\">\n      </td>\n    </tr>\n  <% } %>\n</table>";
    rulerTemplate = "<li>\n  <table class=\"track\">\n  <tr>\n    <td class=\"title-cell\">&nbsp;</td>\n  </tr>\n  <% for (var i = 0; i < 64; i++) { %>\n    <tr>\n      <td class=\"sc-gain ruler-cell\">\n        <%= (i < 10) ? \"0\" + i : i %>\n      </td>\n    </tr>\n    <% } %>\n  </table>\n</li>";
    Track = (function(_super) {

      __extends(Track, _super);

      function Track() {
        return Track.__super__.constructor.apply(this, arguments);
      }

      Track.prototype.defaults = function() {
        var gainNode, panNode;
        gainNode = app.context.createGainNode();
        panNode = app.context.createPanner();
        panNode.panningModel = webkitAudioPannerNode.EQUALPOWER;
        gainNode.connect(panNode);
        panNode.connect(app.context.destination);
        return {
          hitlist: {},
          panNode: panNode,
          gainNode: gainNode
        };
      };

      return Track;

    })(Backbone.Model);
    TrackView = (function(_super) {

      __extends(TrackView, _super);

      function TrackView() {
        return TrackView.__super__.constructor.apply(this, arguments);
      }

      TrackView.prototype.tagName = 'li';

      TrackView.prototype.template = _.template(trackTemplate);

      TrackView.prototype.initialize = function() {
        return this.render();
      };

      TrackView.prototype.render = function() {
        this.$el.html(this.template({
          title: this.model.get('title')
        }));
        return $('#track-list').append(this.el);
      };

      TrackView.prototype.noteHandle = function(e) {
        var idx;
        if (!(app.activeBuffer != null)) {
          return false;
        }
        idx = app.buffers.indexOf(app.activeBuffer) + 1;
        $(e.target).val("C.0" + idx);
        return this.updateHit(e);
      };

      TrackView.prototype.updateHit = function(e) {
        var buffer, bufferIndex, gain, hitlist, line, noteString, pan,
          _this = this;
        line = $(e.target).closest('tr').index() - 1;
        hitlist = this.model.get('hitlist');
        if (hitlist[line] != null) {
          app.metronome.removeListener("t" + line, hitlist[line]);
        }
        gain = parseFloat(this.$el.find("tr:nth-child(" + (line + 2) + ") .sc-gain input").val());
        gain = _.isNaN(gain) ? 1.0 : gain / 80;
        pan = parseFloat(this.$el.find("tr:nth-child(" + (line + 2) + ") .sc-pan input").val());
        pan = _.isNaN(pan) ? 0.0 : (pan - 40.0) / 80;
        noteString = this.$el.find("tr:nth-child(" + (line + 2) + ") .sc-note input").val();
        if (!(noteString != null) || noteString === '') {
          return false;
        }
        bufferIndex = (parseInt(noteString.split('.')[1])) - 1;
        buffer = app.buffers[bufferIndex];
        hitlist[line] = (function() {
          return function() {
            return _this.fire({
              buffer: buffer,
              gain: gain,
              pan: pan
            });
          };
        })();
        return app.metronome.addListener("t" + line, hitlist[line]);
      };

      TrackView.prototype.fire = function(hit) {
        this.node = app.context.createBufferSource();
        this.node.buffer = hit.buffer;
        this.node.connect(this.model.get('gainNode'));
        this.model.get('gainNode').gain.value = hit.gain;
        this.model.get('panNode').setPosition(hit.pan, 0, .1);
        return this.node.noteOn(0);
      };

      TrackView.prototype.events = {
        'keypress .sc-note > input': 'noteHandle',
        'change .sc-gain > input': 'updateHit',
        'change .sc-pan > input': 'updateHit'
      };

      return TrackView;

    })(Backbone.View);
    $('#track-list').append(_.template(rulerTemplate, {}));
    for (number = _i = 0; _i <= 7; number = ++_i) {
      new TrackView({
        model: new Track({
          title: "Track 0" + number
        })
      });
    }
    $('.track tr:nth-child(4n + 2)').addClass('beatAccent');
    $('#bpm-control input').on('change', function() {
      var v;
      v = parseInt($(this).val());
      if ((30 < v && v < 499)) {
        return app.metronome.setBPM(v);
      }
    });
    $('#lpb-control input').on('change', function() {
      var v;
      v = parseInt($(this).val());
      if (v < 1 || v > 16) {
        $(this).val(app.metronome.res);
        return false;
      }
      app.metronome.setResolution(v);
      $('.beatAccent').removeClass('beatAccent');
      return $(".track tr:nth-child(" + v + "n + 2)").addClass('beatAccent');
    });
    $('#new-sample').on('click', function() {
      var name, request, url;
      url = prompt('Enter resource url:');
      name = prompt('Sample name?');
      request = new XMLHttpRequest();
      request.open('get', url, true);
      request.responseType = 'arraybuffer';
      request.onload = function() {
        return app.context.decodeAudioData(request.response, function(buffer) {
          app.buffers.push(buffer);
          return $('#sample-select').append("<option value=\"" + (app.buffers.length - 1) + "\">\n  " + name + "\n</option>");
        });
      };
      return request.send();
    });
    $('#sample-select').on('change', function() {
      var index;
      index = parseInt($(this).val());
      return app.activeBuffer = _.isNaN(index) ? null : app.buffers[index];
    });
    $('input:not([readonly])').on('focus', function() {
      var that;
      that = $(this);
      that.select();
      setTimeout((function() {
        return that.select();
      }), 0);
      return that.mouseup(function() {
        that.unbind('mouseup');
        return false;
      });
    });
    spaceToggle = false;
    Mousetrap.bind('space', function(e) {
      e.preventDefault();
      if (spaceToggle) {
        app.metronome.stop();
      } else {
        app.metronome.startFrom(0);
        app.metronome.start();
      }
      return spaceToggle = !spaceToggle;
    });
    Mousetrap.bind(['backspace', 'del'], function(e) {
      var active;
      e.preventDefault();
      active = $('.track-input:focus');
      if ($(e.target) === !active) {
        return false;
      }
      active.val('');
      if (active.attr('readonly') != null) {
        active = active.parent().next().children('input');
      }
      return active.trigger('change');
    });
    locate = function(e) {
      var active;
      active = $('.track-input:focus').parent();
      return [active.index(), active.closest('tr').index(), active.closest('table')];
    };
    Mousetrap.bind('up', function(e) {
      var ax, ay, track, _ref;
      e.preventDefault();
      _ref = locate(e), ax = _ref[0], ay = _ref[1], track = _ref[2];
      if (ay <= 1) {
        return false;
      }
      return track.find('tr').eq(ay - 1).find('td').eq(ax).find('.track-input').focus();
    });
    Mousetrap.bind('down', function(e) {
      var ax, ay, track, _ref;
      e.preventDefault();
      _ref = locate(e), ax = _ref[0], ay = _ref[1], track = _ref[2];
      if (ay >= 64) {
        return false;
      }
      return track.find('tr').eq(ay + 1).find('td').eq(ax).find('.track-input').focus();
    });
    Mousetrap.bind('left', function(e) {
      var ax, ay, track, _ref;
      e.preventDefault();
      _ref = locate(e), ax = _ref[0], ay = _ref[1], track = _ref[2];
      if (ax <= 0) {
        if (track.parent().index() <= 0) {
          return false;
        }
        track = track.parent().prev().children('table');
        ax = 3;
      }
      return track.find('tr').eq(ay).find('td').eq(ax - 1).find('.track-input').focus();
    });
    return Mousetrap.bind('right', function(e) {
      var ax, ay, track, _ref;
      e.preventDefault();
      _ref = locate(e), ax = _ref[0], ay = _ref[1], track = _ref[2];
      if (ax >= 2) {
        if (track.parent().index() >= 8) {
          return false;
        }
        track = track.parent().next().children('table');
        ax = -1;
      }
      return track.find('tr').eq(ay).find('td').eq(ax + 1).find('.track-input').focus();
    });
  });

}).call(this);
