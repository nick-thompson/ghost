// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Track, TrackView, app, number, rulerTemplate, spaceToggle, trackTemplate, _i;
    app = {
      context: new webkitAudioContext(),
      metronome: new Metronome(140, 4),
      buffers: []
    };
    trackTemplate = '<table class="track">\n  <tr>\n    <td class="title-cell" colspan=3>\n      <%= title %>\n    </td>\n  </tr>\n  <% for (var i = 0; i < 64; i++) { %>\n    <tr>\n      <td class="sc-note">\n        <input type="text" class="track-input" value="...." readonly>\n      </td>\n      <td class="sc-gain">\n        <input type="text" class="track-input" value="80" readonly>\n      </td>\n      <td class="sc-pan">\n        <input type="text" class="track-input" value="80" readonly>\n      </td>\n    </tr>\n  <% } %>\n</table>';
    rulerTemplate = '<li>\n  <table class="track">\n  <tr>\n    <td class="title-cell">&nbsp;</td>\n  </tr>\n  <% for (var i = 0; i < 64; i++) { %>\n    <tr>\n      <td class="sc-gain ruler-cell">\n        <%= (i < 10) ? "0" + i : i %>\n      </td>\n    </tr>\n    <% } %>\n  </table>\n</li>';
    Track = (function(_super) {

      __extends(Track, _super);

      function Track() {
        return Track.__super__.constructor.apply(this, arguments);
      }

      Track.prototype.defaults = {
        hitlist: []
      };

      return Track;

    })(Backbone.Model);
    TrackView = (function(_super) {

      __extends(TrackView, _super);

      function TrackView() {
        return TrackView.__super__.constructor.apply(this, arguments);
      }

      TrackView.prototype.tagName = 'li';

      TrackView.prototype.template = _.template(trackTemplate);

      TrackView.prototype.initialize = function() {
        app.metronome.addListener('tick', function(t) {
          return console.log(t);
        });
        return this.render();
      };

      TrackView.prototype.render = function() {
        this.$el.html(this.template({
          title: this.model.get('title')
        }));
        return $('ul').append(this.el);
      };

      return TrackView;

    })(Backbone.View);
    $('ul').append(_.template(rulerTemplate, {}));
    for (number = _i = 0; _i <= 7; number = ++_i) {
      new TrackView({
        model: new Track({
          title: "Track 0" + number
        })
      });
    }
    $('.track tr:nth-child(4n + 2)').addClass('beatAccent');
    $('#bpm-control input').on('change', function() {
      var v;
      v = parseInt($(this).val());
      if ((30 < v && v < 499)) {
        return app.metronome.setBPM(v);
      }
    });
    $('#lpb-control input').on('change', function() {
      var v;
      v = parseInt($(this).val());
      if (v < 1 || v > 16) {
        $(this).val(app.metronome.res);
        return false;
      }
      app.metronome.setResolution(v);
      $('.beatAccent').removeClass('beatAccent');
      return $(".track tr:nth-child(" + v + "n + 2)").addClass('beatAccent');
    });
    $('#sample-load').on('change', function() {
      var name, parts, request, url;
      url = $(this).val();
      parts = url.split('/');
      name = parts[parts.length - 1];
      $(this).val('');
      request = new XMLHttpRequest();
      request.open('get', url, true);
      request.responseType = 'arraybuffer';
      request.onload = function() {
        return app.context.decodeAudioData(request.response, function(buffer) {
          app.buffers.push(buffer);
          $('.instrument-panel ol').append("<li data-bufferindex=\"" + (app.buffers.length - 1) + "\">\n  " + name + "\n</li>");
          if (!(typeof activeBuffer !== "undefined" && activeBuffer !== null)) {
            return app.activeBuffer = buffer;
          }
        });
      };
      return request.send();
    });
    $('.instrument-panel ol').on('click', 'li', function() {
      var index;
      index = parseInt($(this).data('bufferindex'));
      app.activeBuffer = app.buffers[index];
      $(this).parent().children().removeClass('active');
      return $(this).addClass('active');
    });
    app.metronome.addListener('tick', function(t) {
      $('.highlight').removeClass('highlight');
      return $(".track tr:nth-child(" + (t - 1) + ")").addClass('highlight');
    });
    spaceToggle = false;
    return Mousetrap.bind('space', function(e) {
      e.preventDefault();
      if (spaceToggle) {
        app.metronome.stop();
      } else {
        app.metronome.startFrom(0);
        app.metronome.start();
      }
      return spaceToggle = !spaceToggle;
    });
  });

}).call(this);
